package com.hello;

import com.google.gson.Gson;

import java.util.Map;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.atomic.AtomicInteger;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

    public static void main(String[] args) {

        AtomicInteger connectionCounter = new AtomicInteger();
        SocketServer httpServer = new SocketServer("http-proxy", 10000);
        SocketServer tcpServer = new SocketServer("tcp-connection", 9999);

        LinkedBlockingQueue<String> left = new LinkedBlockingQueue<>();
        LinkedBlockingQueue<String> right = new LinkedBlockingQueue<>();
        Gson gson = new Gson();

        final HttpProxy httpProxy = (method, query, headers, body, out) -> {

            if (connectionCounter.get() > 0) {
                final Map<String, String> params = Utils.queryToMap(query);


                if (params.containsKey("url")) {
                    final String url = params.get("url");
                    if (url.contains("transfer")) {

                        final Command cmd = new Command(url, params);
                        cmd.data = Integer.parseInt(params.get("c"));
                        left.offer(gson.toJson(cmd));
                        final String result = Utils.takeSilent(right);
                        out.write("Result:" + result);
                        return;
                    }
                }
                out.write("Ok");
            } else {
                out.write("No clients");
            }
        };

        httpServer.setClientFactory(socket -> new HttpClient("http", socket, httpProxy));
        httpServer.start();

        tcpServer.setClientFactory(socket -> {
            final TcpClient thread = new TcpClient("socket", socket);
            thread.setConnectionCounter(connectionCounter);
            thread.setInCommandsQueue(left);
            thread.setOutCommandsQueue(right);
            return thread;
        });
        tcpServer.start();
    }

}